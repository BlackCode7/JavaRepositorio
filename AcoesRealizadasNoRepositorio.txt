Repositório cria para aplicações Java e casos de estudos

Regras para criação de Pastas
    1 - pastas criadas com PascalCase
    >>> exemplo: 'PastaCriadaComPascalCase'

    2 - arquivos criados com PascalCase
    >>> exemplo: 'ArquivosTestePascalCase.ts'

    3 - nomes de variáveis criados com camelCase
    >>> exemplo: 'variavelCamelCase'
    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    Data 19/11/21
    Hoje eu treinei java resolvendo o seguinte problema: 
    
    /*
	 *Para fazer o cálculo da área do quadrado é necessário realizar o 
	 *produto entre dois lados. Como o quadrado tem lados iguais, basta 
	 *pegar a medida de um dos lados e elevar ao quadrado. Para a 
	 *realização usamos a fórmula da área A = b. h, assim um de seus 
	 *lados será a base (b) e o outro a altura (h). 
	 */
     
>>>> Usei este código <<<<
     
package applicationCalculoAreaQuadrado;

import java.util.Locale;
import java.util.Scanner;
import entitiesQuadrado.QuadradoEntitie;
public class CalculoQuadrado {
	/**
	 * @param args
	 */
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		/*
		 *Para fazer o cálculo da área do quadrado é necessário realizar o 
		 *produto entre dois lados. Como o quadrado tem lados iguais, basta 
		 *pegar a medida de um dos lados e elevar ao quadrado. Para a 
		 *realização usamos a fórmula da área A = b. h, assim um de seus 
		 *lados será a base (b) e o outro a altura (h). 
		 */
		
		Locale.setDefault(Locale.US);
		Scanner sc = new Scanner(System.in);
		
		int potencia = 2;		
		int A;		
		int B;
		int C;
		
		//A = new QuadradoEntitie();
		//B = new QuadradoEntitie();
		//C = new QuadradoEntitie();
		
		System.out.println("Digite as medidas do Quadrado A :");
		A = (int)sc.nextDouble();
		System.out.println("Digite as medidas do Quadrado B :");
		B = (int)sc.nextDouble();
		System.out.println("Digite as medidas do Quadrado C :");
		C = (int)sc.nextDouble();
		
		double A_calcArea = (int) Math.pow(A,potencia);
		double B_calcArea = (int) Math.pow(B,potencia);
		double C_calcArea = (int) Math.pow(C,potencia);
		
		System.out.printf("Area do quadrado A: %.4f%n ",A_calcArea);
		System.out.printf("Area do quadrado B: %.4f%n ",B_calcArea);
		System.out.printf("Area do quadrado C: %.4f%n ",C_calcArea);
		
		if (A_calcArea > B_calcArea) {
			System.out.println("Maior área é A_calcArea");
		}
		else if (B_calcArea > C_calcArea){
			System.out.println("A Maior Area é B_calcArea");
		}
		else {
			System.out.println("A Maior Area é C_calcArea");
		}
		sc.close();	
	}
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Scaneando pacotes de terceiros  com spring boot

class VendasApplicaation.java

// Este @Component é bom para scannear pacotes de terceiros que não foram criados
// no packote original com springboot
@ComponentScan(
                basePackages = {
                    // Aqui coloca os pacotes de terceiros
                    "package io.blackcode.repository",
                    "com.blackcode.venda.service"
                }
              )

----------------------------------------------------
pacote repository
arquivo MeuRepository.java
package com.blackcode.venda.repository;
import org.springframework.stereotype.Repository;
@Repository
public class MeuRepository {
}

----------------------------------------------------
pacote service
arquivo MeuServico.java
package com.blackcode.venda.service;
import org.springframework.stereotype.Service;
@Service
public class MeuServico {
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Injetando dependências com springboot
package com.blackcode.venda.service;
import com.blackcode.venda.model.Cliente;
import com.blackcode.venda.repository.ClientesRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class ClienteService {
    // Injetando as dependências do SprintBoot
    private final ClientesRepository repository;
    @Autowired
    public ClienteService(ClientesRepository repository){
        this.repository = repository;
    }
    public void salvarCliente(Cliente cliente){
        validarCliente(cliente);
        this.repository.persistir(cliente);
    }
    public void validarCliente(Cliente cliente){
        // Applicate validations
    }
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


